## General

NOTE: I have <leader> mapped to <space>, C- means Ctrl+, and M- means Alt+

i - insert mode
a - append after cursor (as opposed to i)
(C-)v - visual (block) mode
V - visual line mode
ESC/C-[ - exit i/v/c mode. I also have ii mapped
M-normal mode key - in insert mode, execute a normal mode command, e.g. u
u - undo
C-r - redo
y/d - copy/delete in visual mode (yy/dd for line in normal mode)
P/p - paste before/after cursor
C-o - go back to last point. in insert mode, issue command without leaving insert. I also have uu mapped
C-i - jump forward
:(v)s(plit) - split window (vertically) :sp and :vs also acceptable
:only - close all splits but this one
C-w + direction - navigate between splits
C-w + r - swap splits
:tabe - open new tab. NOTE: Use tabs as VIEWPORTS, not in place of buffers
:tab[np] - next/previous tab
:tabonly - close all tabs but this one
:qa - close all tabs at once (or :wqa to write as well)
o - new line under
O - new line over
^ - go to start of line (text)
0 - go to start of line (absolute)
$ - got to end of line
:te[rminal] - open shell/terminal (exit to return to vim)
@: - repeat previous command (and then @@ for subsequent completions)
gg - top of file
G - end of file
= - indent command. gg=G to indent whole file. NOTE: better to use language server
:b[next|previous] - next/previous buffer
:[ls|buffers|files] - show all buffers/files
:b(uffer) N - go to buffer N ("uffer" is unnecessary). alternately, tab to cycle through buf names
:bd N|<file> - delete buffer
\[cC] - change search/search-replace to case insensitive (c) and sensitive (C).
	note that ignorecase/smartcase are on
[uU] - in visual mode, change to lower/upper case
>> - indent, e.g. 3>>.. to indent 3 lines 3 times (. repeats action)
<< - unindent
dd - delete line
:<num> - go to line <num>
q: - command history (from normal mode). can use / and ? to search in history
C-r" - paste yanked test in command mode, e.g. for search
C-] - go to label in docs
:! <command> - run shell command. use % as current file placeholder, e.g. :! wc %
               also works in visual mode
:r <file> - read file into buffer
:r ! <command> - read command output into buffer
:[nvi]map - see key mappings
gx - go to url under cursor (kind of broken, but in a pinch)
* - search for word under cursor. g* is partial match
:noh - remove highlighting, e.g. from *. slightly different version mapped to <leader>/
M-[kj] - move current or selected line up and down. Also mapped to M-Up/Down
<leader>wr - turning line wrapping on/off nicely

## Folding
:Fold - fold current buffer using coc.vim.
        Could alternatively set foldmethod. See :help folding
za - open/close fold
zA - recursively open/close fold
zM - close all folds. zm for reduce folding level
zR - open all folds. zr for increase folding level

## Search/replace

:/foo - search for foo
* - highlight all occurences of word under cursor (* again for next occurence)
:%s/foo/bar/ - whole file. also mapping to C-h
:s/foo/bar/ - current line
<leader>fr - all files in current dir
tags:
   g - global
   c - confirmation
   [iI] - case (in)sensitive

Note that + in regex must be escaped, e.g. \d\+, not \d+

## coc.vim

gd - go to definition
gy - go to type definition
gi - go to implementation
gr - look up references
gn - go to next diagnostic message
gp - go to previous diagnostic message
ge - go to next error position, i.e. skip warnings, etc.
K - show documentation
<leader>rn - rename current word
<leader>f - format selection
:Prettier - format buffer
<leader>b - alternate format buffer
<leader>c - show commands

<TAB> - snippet completion
<C-n> - next completion. allows use without snippet, e.g. for refering to functions
        instead of function calls
<C-p> - previous completion

## denite

; - Browser currently open buffers
<leader>t - Browse list of files in current directory
<leader>g - Search current directory for occurences of given term and close window if no results
<leader>u - Search current directory for occurences of word under cursor

In filter mode:
<C-o> - Switch to normal mode inside of search results (fuzzy matching)
<Esc> - Exit denite window in any mode
<CR> - Open currently selected file in any mode

<CR> - Opens currently selected file
q or <Esc> or ;  - Quit Denite window
d - Delete currenly selected file (just the buffer)
p - Preview currently selected file
<C-o> or i  - Switch to insert mode inside of filter prompt

## NERDTree

C-n - open. see internal help for other mappings
C-f - find current file in tree

## vim-fugitive (git)

G<git command> - issue git command from within vim

## NERDCommenter

[count]<leader>c<space> - toggle comment state of selected lines
[count]<leader>cc - comment
[count]<leader>cu - uncomment

## scratch.vim

:Scratch - open in normal mode
gs - normal mode: insert in scratch buffer. visual: paste
gS - same as gs, but clear scratch first

## vim-easymotion

s - type 2 chars to find, then label or ESC
<leader>j - lines below
<leader>k - lines above

## Ctrl-P

C-p - search in current dir = directory of current buffer, NOT cwd
:CtrlP <dir> - to search in a another dir
Press <F5> to purge the cache for the current directory to get new files, remove deleted files and apply new ignore options.
Press <c-f> and <c-b> to cycle between modes (files, buffers, mru files).
Press <c-d> to switch to filename only search instead of full path.
Press <c-r> to switch to regexp mode.
Use <c-j>, <c-k> or the arrow keys to navigate the result list.
Use <c-t> or <c-v>, <c-x> to open the selected entry in a new tab or in a new split.
Use <c-n>, <c-p> to select the next/previous string in the prompt's history.
Use <c-y> to create a new file and its parent directories.
Use <c-z> to mark/unmark multiple files and <c-o> to open them.

## vim-dadbod
:DB type:path SQL - e.g. :DB sqlite:db.sqlite select * from my_table
:%DB ... - execute current buffer. Similar for visual mode
:DB ... < file - run file

## tagbar
<F8> - toggle tagbar

## vim-windowswap

<leader>ww in current pane, <leader>ww in swap to pane to swap

### NOT CURRENTLY INSTALLED ###

## YouCompleteMe (removed, conflict with coc.vim)

TAB - accept completion. continue pressing or shift-TAB to cycle back and forth
C-space - trigger completion suggestion from anywhere
<leader>-g - goto
<leader>-f - goto declaration
<leader>-r - references
<leader>-d - docs

## Conque Shell (see http://www.vim.org/scripts/script.php?script_id=2771)

:ConqueTerm <command> - to start any command, e.g. bash
<esc> - send escape to enter normal mode. slight delay
<esc><esc> - send single <esc> to terminal

## xml-plugin

% - jump between '<' and '>' within the tag your cursor is in.
> - when finishing a tag, complete it
>> - when finishing a tag, complete it and place the cursor in the middle

## django.vim

:setfiletype (html)django - for django syntax highlighting in with/without html highlighting

## syntastic (pylint, flake8, etc.)

runs on file write
note that for virtualenv to work, pylint must be installed in the virtualenv

:SyntasticCheck [checker+] - run a default check or with specified checkers, e.g. pylint
:Errors - show errors (in location list)
:lclose - close locations list

## Pyunit (vim-pyunit) - REMOVED (incompatible?)

F8 - run nose tests

## auto-pairs
M-n - move to closing brace/quote/whatever

