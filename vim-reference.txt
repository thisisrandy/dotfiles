## General

NOTE: I have <leader> mapped to <space>, C- means Ctrl+, M- means Alt+,
      and S- means Shift+

i - insert mode (I to insert at beginning of line)
a - append after cursor (as opposed to i) (A to append at end of line)
[number]r - replace character (R for replace mode)
c[number]{motion} - change mode, e.g. c2e to change until end of next word
(C-)v - visual (block) mode
V - visual line mode
hjkl - left/down/up/left
C-[ud] - half page up/down
ESC/C-[ - exit i/v/c mode. I also have ii mapped
M-normal mode key - in insert mode, execute a normal mode command, e.g. u
u - undo (U to undo all changes to a line)
C-r - redo
y/d - copy/delete in visual mode (yy/dd for line in normal mode)
P/p - paste before/after cursor
C-o - go back to last point. in insert mode, issue command without leaving insert
C-i - jump forward
:(v)s(plit) - split window (vertically) :sp and :vs also acceptable
:only - close all splits but this one
C-w + direction - navigate between splits (also mapped to C-direction)
C-w + r - swap splits
:tabe - open new tab. NOTE: Use tabs as VIEWPORTS, not in place of buffers
:tab[np] - next/previous tab
:tabonly - close all tabs but this one
:qa - close all tabs at once (or :wqa to write as well)
o - new line under
O - new line over
^ - go to start of line (text)
0 - go to start of line (absolute)
$ - go to end of line
:te[rminal] - open shell/terminal (exit to return to vim)
[count]@: - repeat last command (and then @@ for subsequent repetitions)
[count]. - repeat last change
gg - top of file
G - end of file
= - indent command. gg=G to indent whole file. NOTE: better to use language server
:b[next|previous] - next/previous buffer NOTE: better to use denite for buf switching
:[ls|buffers|files] - show all buffers/files
:b(uffer) N - go to buffer N ("uffer" is unnecessary). alternately, tab to cycle through buf names
:bd N|<file> - delete buffer
[uU] - in visual mode, change to lower/upper case
>> - indent, e.g. 3>>.. to indent 3 lines 3 times (. repeats action)
<< - unindent
:<num> - go to line <num>
q: - command history (from normal mode). can use / and ? to search in history
C-r" - paste yanked test in command mode, e.g. for search
C-] - go to label in docs
:! <command> - run shell command. use % as current file placeholder, e.g. :! wc %
               also works in visual mode
:r <file> - read file into buffer
:r ! <command> - read command output into buffer
:[nvi]map - see key mappings
gx - go to url under cursor (kind of broken, but in a pinch)
M-[kj] - move current or selected line up and down. Also mapped to M-Up/Down
<leader>wr - turning line wrapping on/off nicely
C-S-arrow - resize window. not this is not placement aware, so up = +,
            down = -, right = +, left = - regardless of window position
:copen - open the quickfix window
:cclose - close the quickfix window
gq - rebalance text to textwidth
F6 - execute current line in the shell

## Text objects

[op]i[object] - perform op, e.g. d, on inner object, where object can be:
  w - word
  s - sentence
  p - paragraph
  [](){}"' - text surrounded by any of these characters
  t - tag
[op]a[object] - same as above, but includes whitespace, or in the case of
                surrounding quotes, etc., the surrounding chars
[op]% - equiv. to [op]a[paren/bracket]

## Folding

:Fold - fold current buffer using coc.vim.
        Could alternatively set foldmethod. See :help folding
za - open/close fold
zA - recursively open/close fold
zM - close all folds. zm for reduce folding level
zR - open all folds. zr for increase folding level

## Search/replace

\ - use vim-fuzzysearch in normal mode
/ - very magic mode
? - reverse in very magic mode
<leader>h - Find and replace in very magic mode
* - search for word under cursor. g* is partial match. mapped to highlight only.
    use n/N to navigate between matches
# - * in reverse. g# also valid
:noh - remove highlighting, e.g. from *. mapped to <leader>/
% - find matching paren/brace
:%s/foo/bar/ - whole file. also mapped to C-h
:s/foo/bar/ - current line
<leader>fr - search/replace all files in current dir (cwd, not buffer dir)
tags:
   g - global
   c - confirmation
   e - don't issue error if not found (useful in scripts)
   [iI] - case (in)sensitive

Note that + in regex must be escaped, e.g. \d\+, not \d+ (except see below)

in-expression modifiers:
\[cC] - change to case insensitive (c) and sensitive (C).
	note that ignorecase/smartcase are on
\v - "very magic mode." all ascii characters except [a-zA-Z0-9_] are treated
     as special, so no more escaping [+(){}[]], etc.

Also note that while \n matches a new line, replacement with a newline must use \r.

Other useful characters (that are different from perl syntax. Assuming \v below):
\_s - where s can be any character class, add new-line, so e.g. \_s == [\s\n]
<> - front and end word boundaries

Finally, note that othree/eregex.vim exists to translate from perl-style if the
differences become too frustrating.

## coc.vim

gd - go to definition
gt - go to type definition
gi - go to implementation
gr - look up references
gn - go to next diagnostic message
gp - go to previous diagnostic message
ge - go to next error position, i.e. skip warnings, etc.
K - show documentation
<leader>r - rename current word
<leader>b - format buffer
<leader>co - show commands

<TAB> - snippet completion. also next snippet placeholder (when not in completion mode)
<C-n> - next completion. allows use without snippet, e.g. for refering to functions
        instead of function calls. <Down> mapped to the same.
<C-p> - previous completion. <Up> mapped to the same.

<leader>y - yank list. i to fuzzy search, <space> to select multiple. note that system
            clipboard copies aren't included

:CocList marketplace - see which extensions are installed and search for new ones

## denite

; - Browser currently open buffers (starts in filter mode)
<leader>t - Browse list of files in current directory (starts in filter mode)
<leader>g - Search current directory for occurences of given term and close window if no results
<leader>u - Search current directory for occurences of word under cursor

In filter mode:
<C-o> - Quit filter mode
<Esc> - Switch to normal mode inside of filter bar (rarely useful)
<CR>  - Open currently selected filter
<C-v> - "" in vsplit
<C-h> - "" in split
<C-t> - "" in new tab
<C-a> - Toggle select all

In normal mode:
<CR>       - Opens currently selected file
<C-v>      - "" in vsplit
<C-h>      - "" in split
<C-t>      - "" in new tab
q/<Esc>/;  - Quit Denite window
d          - Delete currenly selected file (just the buffer)
p          - Preview currently selected file
<C-o> or h - Switch to insert mode inside of filter prompt
<C-Space>  - Toggle select
<C-a>      - Toggle select all

## NERDTree

C-n - open. see internal help for other mappings
C-f - find current file in tree

## vim-fugitive/rhubarb (git)

G<git command> - issue git command from within vim
G[v]diffsplit! - three way [vertical] merge on file with conflicts
dp - when resolving conflicts, put the side under the cursor in the merged buffer
Gwrite - write and stage current buffer
Gbrowse - browse at the upstream provider, e.g. github
Glog - browse the commit log
... and many others. See the docs

NOTE: In order for push to upstream to work, credentials must be stored. Run
> git config --global credential.helper store
if not already configured, and then do an operation that requires entering credentials

## NERDCommenter

[count]<leader>c<space> - toggle comment state of selected lines
[count]<leader>cc - comment
[count]<leader>cu - uncomment

## scratch.vim

:Scratch - open in normal mode
gs - normal mode: insert in scratch buffer. visual: paste
gS - same as gs, but clear scratch first

## vim-easymotion

s - type a single to find, then type the appropriate label or ESC
<leader>j - lines below
<leader>k - lines above

## vim-dadbod

:DB type:path SQL - e.g. :DB sqlite:db.sqlite select * from my_table
:%DB ... - execute current buffer. Similar for visual mode
:DB ... < file - run file

## tagbar

<F8> - toggle tagbar
<F9> - open and focus on tagbar, then auto close after tag selected
<C-t> - same as <F9>, but start a fuzzy search. useful for quickly jumping to functions

## vim-windowswap

<leader>ww in current pane, <leader>ww in swap to pane to swap

## vim-gitgutter

]c - next hunk (change)
[c - previous hunk
<leader>hs - hunk stage. can be used to partially stage an additions only hunk
             in visual mode
<leader>hu - hunk undo (undo change, *not* unstage)
<leader>hp - preview the hunk. can stage part of any hunk by previewing, moving
             to the preview window, and then :w
GitGutterFold - fold all unchanged lines. zr to unfold 3 lines of context around
                changes. Again to restore previous view

## vim-surround

Define [old] as a character or t for "tag"

ds[old] - delete surround
cs[old][surround] - change surround
ys[motion][surround] - "you surround," e.g. ysiw[surround] for current word
yss[surround] - current line, ignoring leading whitespace
vS[surround] - surround in visual mode, where v denotes entering visual mode

